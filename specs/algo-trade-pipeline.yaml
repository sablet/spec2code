version: "1"
meta:
  name: "algo_trade_pipeline"
  description: "Algorithmic trading DAG pipeline with advanced type features"

checks:
  # Phase 1: Market Data Ingestion
  - id: check_ingestion_config
    description: "Validate market data ingestion configuration"
    impl: "apps.algo_trade_pipeline.checks.market_data_checks:check_ingestion_config"
    file_path: "checks/market_data_checks.py"
    input_type_ref: MarketDataIngestionConfig

  - id: check_batch_collection
    description: "Validate provider batch collection"
    impl: "apps.algo_trade_pipeline.checks.market_data_checks:check_batch_collection"
    file_path: "checks/market_data_checks.py"
    input_type_ref: ProviderBatchCollection

  - id: check_normalized_bundle
    description: "Validate normalized OHLCV bundle"
    impl: "apps.algo_trade_pipeline.checks.market_data_checks:check_normalized_bundle"
    file_path: "checks/market_data_checks.py"
    input_type_ref: NormalizedOHLCVBundle

  - id: check_multiasset_frame
    description: "Validate MultiAsset OHLCV frame with MultiIndex structure"
    impl: "apps.algo_trade_pipeline.checks.market_data_checks:check_multiasset_frame"
    file_path: "checks/market_data_checks.py"
    input_type_ref: MultiAssetOHLCVFrame

  - id: check_snapshot_meta
    description: "Validate market data snapshot metadata"
    impl: "apps.algo_trade_pipeline.checks.market_data_checks:check_snapshot_meta"
    file_path: "checks/market_data_checks.py"
    input_type_ref: MarketDataSnapshotMeta

  # Phase 2: Feature Engineering
  - id: check_ohlcv
    description: "Validate OHLCV DataFrame structure"
    impl: "apps.algo_trade_pipeline.checks.feature_checks:check_ohlcv"
    file_path: "checks/feature_checks.py"
    input_type_ref: OHLCVFrame
    spec_metadata:
      validation_steps:
        - "Verify DataFrame has required columns (open, high, low, close)"
        - "Check datetime index exists and is monotonic"
        - "Validate price relationships (high >= open/close, low <= open/close)"
        - "Check for missing or invalid values"
      complexity: "O(n)"
      error_handling: "Returns False if any validation fails"

  - id: check_target
    description: "Validate target variable DataFrame"
    impl: "apps.algo_trade_pipeline.checks.feature_checks:check_target"
    file_path: "checks/feature_checks.py"
    input_type_ref: TargetFrame

  - id: check_feature_frame
    description: "Validate feature DataFrame"
    impl: "apps.algo_trade_pipeline.checks.feature_checks:check_feature_frame"
    file_path: "checks/feature_checks.py"
    input_type_ref: FeatureFrame

  - id: check_aligned_data
    description: "Validate aligned feature-target data"
    impl: "apps.algo_trade_pipeline.checks.feature_checks:check_aligned_data"
    file_path: "checks/feature_checks.py"
    input_type_ref: AlignedFeatureTarget

  # Phase 3: Model Training & Prediction
  - id: check_cv_config
    description: "Validate cross-validation configuration"
    impl: "apps.algo_trade_pipeline.checks.model_checks:check_cv_config"
    file_path: "checks/model_checks.py"
    input_type_ref: SimpleCVConfig
    spec_metadata:
      validation_steps:
        - "Verify method is one of TIME_SERIES, EXPANDING_WINDOW, or SLIDING_WINDOW"
        - "Check n_splits is positive integer"
        - "Validate test_size is between 0 and 1 if provided"
        - "Ensure gap is non-negative integer"
      complexity: "O(1)"

  - id: check_cv_result
    description: "Validate CV training result"
    impl: "apps.algo_trade_pipeline.checks.model_checks:check_cv_result"
    file_path: "checks/model_checks.py"
    input_type_ref: CVResult

  - id: check_prediction_data
    description: "Validate prediction data list"
    impl: "apps.algo_trade_pipeline.checks.model_checks:check_prediction_data"
    file_path: "checks/model_checks.py"
    input_type_ref: PredictionDataList

  # Phase 4: Backtest & Evaluation
  - id: check_ranked_predictions
    description: "Validate ranked prediction data"
    impl: "apps.algo_trade_pipeline.checks.backtest_checks:check_ranked_predictions"
    file_path: "checks/backtest_checks.py"
    input_type_ref: RankedPredictionDataList

  - id: check_selected_currencies
    description: "Validate selected currency data"
    impl: "apps.algo_trade_pipeline.checks.backtest_checks:check_selected_currencies"
    file_path: "checks/backtest_checks.py"
    input_type_ref: SelectedCurrencyDataList

  - id: check_selected_currencies_with_costs
    description: "Validate selected currency data with trading costs"
    impl: "apps.algo_trade_pipeline.checks.backtest_checks:check_selected_currencies_with_costs"
    file_path: "checks/backtest_checks.py"
    input_type_ref: SelectedCurrencyDataWithCostsList

  - id: check_simulation_result
    description: "Validate simulation result"
    impl: "apps.algo_trade_pipeline.checks.backtest_checks:check_simulation_result"
    file_path: "checks/backtest_checks.py"
    input_type_ref: SimulationResult

  - id: check_performance_metrics
    description: "Validate performance metrics"
    impl: "apps.algo_trade_pipeline.checks.backtest_checks:check_performance_metrics"
    file_path: "checks/backtest_checks.py"
    input_type_ref: PerformanceMetrics

  # Additional type checks
  - id: check_cv_method
    description: "Validate CV method enum value"
    impl: "apps.algo_trade_pipeline.checks.model_checks:check_cv_method"
    file_path: "checks/model_checks.py"
    input_type_ref: CVMethod

  - id: check_position_signal
    description: "Validate position signal enum value"
    impl: "apps.algo_trade_pipeline.checks.backtest_checks:check_position_signal"
    file_path: "checks/backtest_checks.py"
    input_type_ref: PositionSignal

  - id: check_ohlcv_row
    description: "Validate OHLCV row data structure"
    impl: "apps.algo_trade_pipeline.checks.feature_checks:check_ohlcv_row"
    file_path: "checks/feature_checks.py"
    input_type_ref: OHLCVRow

  - id: check_trading_cost_config
    description: "Validate trading cost configuration"
    impl: "apps.algo_trade_pipeline.checks.backtest_checks:check_trading_cost_config"
    file_path: "checks/backtest_checks.py"
    input_type_ref: TradingCostConfig

  - id: check_simple_lgbm_params
    description: "Validate LightGBM parameters dictionary"
    impl: "apps.algo_trade_pipeline.checks.model_checks:check_simple_lgbm_params"
    file_path: "checks/model_checks.py"
    input_type_ref: SimpleLGBMParams

examples:
  - id: ex_ingestion_config
    description: "Market data ingestion config example"
    datatype_ref: MarketDataIngestionConfig
    input:
      symbols: ["USDJPY", "EURUSD"]
      start_date: "2024-01-01"
      end_date: "2024-01-31"
      provider: "yahoo"
    expected:
      valid: true

  - id: ex_ohlcv_row
    description: "OHLCV row example"
    datatype_ref: OHLCVRow
    input:
      timestamp: "2024-01-01T00:00:00"
      open: 145.50
      high: 146.00
      low: 145.00
      close: 145.80
      volume: 1000000
    expected:
      valid: true

  - id: ex_cv_config
    description: "CV configuration example"
    datatype_ref: SimpleCVConfig
    input:
      method: "TIME_SERIES"
      n_splits: 5
      test_size: 0.2
      gap: 0
    expected:
      valid: true

  - id: ex_prediction_data
    description: "Single prediction data example"
    datatype_ref: PredictionData
    input:
      timestamp: "2024-01-01T00:00:00"
      symbol: "USDJPY"
      prediction: 0.65
      actual_return: 0.02
    expected:
      valid: true

  - id: ex_performance_metrics
    description: "Performance metrics example"
    datatype_ref: PerformanceMetrics
    input:
      annual_return: 0.15
      annual_volatility: 0.12
      sharpe_ratio: 1.25
      max_drawdown: -0.08
      calmar_ratio: 1.875
    expected:
      valid: true

  - id: ex_fold_result
    description: "Fold result example"
    datatype_ref: FoldResult
    input:
      fold_index: 0
      train_score: 0.85
      val_score: 0.78
    expected:
      valid: true

  - id: ex_cv_method
    description: "CV method enum example"
    datatype_ref: CVMethod
    input: "TIME_SERIES"
    expected:
      valid: true

  - id: ex_position_signal
    description: "Position signal enum example"
    datatype_ref: PositionSignal
    input: 1
    expected:
      valid: true

  - id: ex_trading_cost_config
    description: "Trading cost configuration example"
    datatype_ref: TradingCostConfig
    input:
      swap_rates:
        USDJPY: 0.0001
        EURUSD: 0.0002
      spread_costs:
        USDJPY: 0.0003
        EURUSD: 0.0004
    expected:
      valid: true

  - id: ex_simple_lgbm_params
    description: "LightGBM parameters example"
    datatype_ref: SimpleLGBMParams
    input:
      learning_rate: 0.05
      num_leaves: 31
      max_depth: -1
    expected:
      valid: true

  - id: ex_selected_currency_data
    description: "Selected currency data example"
    datatype_ref: SelectedCurrencyData
    input:
      timestamp: "2024-01-01T00:00:00"
      symbol: "USDJPY"
      prediction: 0.65
      signal: 1
    expected:
      valid: true

  - id: ex_ranked_prediction_data
    description: "Ranked prediction data example"
    datatype_ref: RankedPredictionData
    input:
      timestamp: "2024-01-01T00:00:00"
      symbol: "USDJPY"
      prediction: 0.65
      actual_return: 0.02
      prediction_rank_pct: 0.85
    expected:
      valid: true

  - id: ex_selected_currency_with_costs
    description: "Selected currency with costs example"
    datatype_ref: SelectedCurrencyDataWithCosts
    input:
      timestamp: "2024-01-01T00:00:00"
      symbol: "USDJPY"
      prediction: 0.65
      signal: 1
      adjusted_return: 0.015
    expected:
      valid: true

  - id: ex_prediction_data_list
    description: "Prediction data list example"
    datatype_ref: PredictionDataList
    input:
      - timestamp: "2024-01-01T00:00:00"
        symbol: "USDJPY"
        prediction: 0.65
        actual_return: 0.02
      - timestamp: "2024-01-01T00:00:00"
        symbol: "EURUSD"
        prediction: 0.58
        actual_return: 0.01
    expected:
      valid: true

  - id: ex_ranked_prediction_data_list
    description: "Ranked prediction data list example"
    datatype_ref: RankedPredictionDataList
    input:
      - timestamp: "2024-01-01T00:00:00"
        symbol: "USDJPY"
        prediction: 0.65
        actual_return: 0.02
        prediction_rank_pct: 0.85
      - timestamp: "2024-01-01T00:00:00"
        symbol: "EURUSD"
        prediction: 0.58
        actual_return: 0.01
        prediction_rank_pct: 0.65
    expected:
      valid: true

  - id: ex_selected_currency_data_list
    description: "Selected currency data list example"
    datatype_ref: SelectedCurrencyDataList
    input:
      - timestamp: "2024-01-01T00:00:00"
        symbol: "USDJPY"
        prediction: 0.65
        signal: 1
      - timestamp: "2024-01-01T00:00:00"
        symbol: "EURUSD"
        prediction: 0.58
        signal: 1
    expected:
      valid: true

  - id: ex_selected_currency_with_costs_list
    description: "Selected currency with costs list example"
    datatype_ref: SelectedCurrencyDataWithCostsList
    input:
      - timestamp: "2024-01-01T00:00:00"
        symbol: "USDJPY"
        prediction: 0.65
        signal: 1
        adjusted_return: 0.015
      - timestamp: "2024-01-01T00:00:00"
        symbol: "EURUSD"
        prediction: 0.58
        signal: 1
        adjusted_return: 0.008
    expected:
      valid: true

generators:
  - id: gen_provider_batches
    description: "Synthesize provider batch payloads"
    impl: "apps.algo_trade_pipeline.generators.market_data:generate_provider_batches"
    file_path: "generators/market_data.py"
    return_type_ref: ProviderBatchCollection

  - id: gen_normalized_bundle
    description: "Create a normalized OHLCV bundle"
    impl: "apps.algo_trade_pipeline.generators.market_data:generate_normalized_bundle"
    file_path: "generators/market_data.py"
    return_type_ref: NormalizedOHLCVBundle

  - id: gen_multiasset_frame
    description: "Build a sample multi-asset OHLCV frame"
    impl: "apps.algo_trade_pipeline.generators.market_data:generate_multiasset_frame"
    file_path: "generators/market_data.py"
    return_type_ref: MultiAssetOHLCVFrame

  - id: gen_snapshot_meta
    description: "Produce snapshot metadata for persisted market data"
    impl: "apps.algo_trade_pipeline.generators.market_data:generate_snapshot_meta"
    file_path: "generators/market_data.py"
    return_type_ref: MarketDataSnapshotMeta

  - id: gen_ohlcv_frame
    description: "Generate a resampled OHLCV frame"
    impl: "apps.algo_trade_pipeline.generators.feature_engineering:generate_ohlcv_frame"
    file_path: "generators/feature_engineering.py"
    return_type_ref: OHLCVFrame
    spec_metadata:
      generation_steps:
        - "Create datetime index with 1-hour frequency"
        - "Generate realistic OHLCV values with price constraints"
        - "Ensure high >= max(open, close) and low <= min(open, close)"
        - "Add optional volume column with random integer values"
      complexity: "O(n)"
      dependencies:
        - pandas
        - numpy

  - id: gen_feature_frame
    description: "Assemble a feature DataFrame"
    impl: "apps.algo_trade_pipeline.generators.feature_engineering:generate_feature_frame"
    file_path: "generators/feature_engineering.py"
    return_type_ref: FeatureFrame

  - id: gen_target_frame
    description: "Assemble a target DataFrame"
    impl: "apps.algo_trade_pipeline.generators.feature_engineering:generate_target_frame"
    file_path: "generators/feature_engineering.py"
    return_type_ref: TargetFrame

  - id: gen_aligned_feature_target
    description: "Align feature and target frames"
    impl: "apps.algo_trade_pipeline.generators.feature_engineering:generate_aligned_feature_target"
    file_path: "generators/feature_engineering.py"
    return_type_ref: AlignedFeatureTarget

  - id: gen_cv_result
    description: "Create a minimal CV result payload"
    impl: "apps.algo_trade_pipeline.generators.model:generate_cv_result"
    file_path: "generators/model.py"
    return_type_ref: CVResult
    spec_metadata:
      generation_steps:
        - "Generate FoldResult for each fold with random scores"
        - "Create OOS predictions DataFrame with timestamps and predictions"
        - "Combine all results into CVResult structure"
      complexity: "O(n_folds)"
      notes: "Generates synthetic cross-validation results for testing"

  - id: gen_simulation_result
    description: "Create a simulation result payload"
    impl: "apps.algo_trade_pipeline.generators.backtest:generate_simulation_result"
    file_path: "generators/backtest.py"
    return_type_ref: SimulationResult

datatypes:
  # ===== Phase 1: Market Data Ingestion =====
  - id: MarketDataIngestionConfig
    description: "Configuration for market data ingestion (symbols, date range, provider)"
    check_functions:
      - check_ingestion_config
    examples:
      - symbols: ["USDJPY", "EURUSD"]
        start_date: "2024-01-01"
        end_date: "2024-01-31"
        provider: "yahoo"
    pydantic_model:
      fields:
        - name: symbols
          type:
            generic:
              container: list
              element_type:
                native: "builtins:str"
          description: "List of trading symbols"
        - name: start_date
          type:
            native: "builtins:str"
          description: "Start date (YYYY-MM-DD)"
        - name: end_date
          type:
            native: "builtins:str"
          description: "End date (YYYY-MM-DD)"
        - name: provider
          type:
            native: "builtins:str"
          description: "Data provider name"

  - id: ProviderBatchCollection
    description: "Collection of raw data batches from multiple providers"
    check_functions:
      - check_batch_collection
    pydantic_model:
      fields:
        - name: batches
          type:
            generic:
              container: list
              element_type:
                native: "pandas:DataFrame"
          description: "Raw OHLCV DataFrames from providers"

  - id: NormalizedOHLCVBundle
    description: "Normalized OHLCV data bundle from multiple providers"
    check_functions:
      - check_normalized_bundle
    pydantic_model:
      fields:
        - name: data
          type:
            datatype_ref: MultiAssetOHLCVFrame
          description: "Normalized OHLCV data as MultiAsset DataFrame"

  # Using type_alias for MultiIndex DataFrame
  - id: MultiAssetOHLCVFrame
    description: "Multi-asset OHLCV DataFrame with MultiIndex structure (symbol, column)"
    check_functions:
      - check_multiasset_frame
    type_alias:
      type: simple
      target: "pandas:DataFrame"

  - id: MarketDataSnapshotMeta
    description: "Metadata for persisted market data snapshot"
    check_functions:
      - check_snapshot_meta
    pydantic_model:
      fields:
        - name: snapshot_id
          type:
            native: "builtins:str"
          description: "Unique snapshot identifier"
        - name: timestamp
          type:
            native: "builtins:str"
          description: "Snapshot timestamp (ISO 8601)"
        - name: symbols
          type:
            generic:
              container: list
              element_type:
                native: "builtins:str"
          description: "List of included symbols"

  # OHLCVRow: 単一行データの構造定義（exampleバリデーション用）
  - id: OHLCVRow
    description: "Single OHLCV row data structure for validation"
    check_functions:
      - check_ohlcv_row
    examples:
      - timestamp: "2024-01-01T00:00:00"
        open: 145.50
        high: 146.00
        low: 145.00
        close: 145.80
        volume: 1000000
    pydantic_model:
      fields:
        - name: timestamp
          type:
            native: "datetime:datetime"
          description: "Timestamp (index)"
        - name: open
          type:
            native: "builtins:float"
          description: "Open price"
        - name: high
          type:
            native: "builtins:float"
          description: "High price"
        - name: low
          type:
            native: "builtins:float"
          description: "Low price"
        - name: close
          type:
            native: "builtins:float"
          description: "Close price"
        - name: volume
          type:
            native: "builtins:int"
          optional: true
          description: "Volume"

  # ===== Phase 2: Feature Engineering =====
  - id: OHLCVFrame
    description: "OHLCV DataFrame where each row conforms to OHLCVRow structure"
    check_functions:
      - check_ohlcv
    type_alias:
      type: simple
      target: "pandas:DataFrame"
    dataframe_schema:
      index:
        name: timestamp
        dtype: datetime
        nullable: false
        unique: false
        monotonic: ""
        description: "Timestamp index"
      columns:
        - name: open
          dtype: float
          nullable: false
          description: "Open price"
        - name: high
          dtype: float
          nullable: false
          description: "High price"
        - name: low
          dtype: float
          nullable: false
          checks:
            - type: ge
              value: 0
              description: "Low price must be non-negative"
          description: "Low price"
        - name: close
          dtype: float
          nullable: false
          description: "Close price"
        - name: volume
          dtype: int
          nullable: true
          description: "Trading volume"
      strict: false
      coerce: true
      ordered: false
    schema:
      type: array
      items:
        type: object
        properties:
          timestamp:
            type: string
            format: date-time
          open:
            type: number
          high:
            type: number
          low:
            type: number
          close:
            type: number
          volume:
            type: integer
        required:
          - timestamp
          - open
          - high
          - low
          - close

  - id: FeatureFrame
    description: "Feature DataFrame (flattened from MultiIndex)"
    check_functions:
      - check_feature_frame
    type_alias:
      type: simple
      target: "pandas:DataFrame"

  - id: TargetFrame
    description: "Target variable DataFrame (single column)"
    check_functions:
      - check_target
    type_alias:
      type: simple
      target: "pandas:DataFrame"

  # Using type_alias with tuple for aligned data
  - id: AlignedFeatureTarget
    description: "Aligned feature and target DataFrames (cleaned, index-matched)"
    check_functions:
      - check_aligned_data
    type_alias:
      type: tuple
      elements:
        - datatype_ref: FeatureFrame
        - datatype_ref: TargetFrame

  # ===== Phase 3: Model Training & Prediction =====
  - id: CVMethod
    description: "Cross-validation method types"
    check_functions:
      - check_cv_method
    enum:
      base_type: str
      members:
        - name: TIME_SERIES
          value: "TIME_SERIES"
          description: "Time-series CV split"
        - name: EXPANDING_WINDOW
          value: "EXPANDING_WINDOW"
          description: "Expanding window split"
        - name: SLIDING_WINDOW
          value: "SLIDING_WINDOW"
          description: "Sliding window split"

  - id: SimpleCVConfig
    description: "Cross-validation configuration (method, splits, test_size, gap)"
    check_functions:
      - check_cv_config
    examples:
      - method: "TIME_SERIES"
        n_splits: 5
        test_size: 0.2
        gap: 0
    pydantic_model:
      fields:
        - name: method
          type:
            datatype_ref: CVMethod
          description: "CV splitting method"
        - name: n_splits
          type:
            native: "builtins:int"
          description: "Number of CV splits"
        - name: test_size
          type:
            native: "builtins:float"
          optional: true
          description: "Test set size ratio"
        - name: gap
          type:
            native: "builtins:int"
          default: 0
          description: "Gap between train and test"

  # Using generic for dict
  - id: SimpleLGBMParams
    description: "LightGBM hyperparameters dictionary"
    check_functions:
      - check_simple_lgbm_params
    generic:
      container: dict
      key_type:
        native: "builtins:str"
      value_type:
        native: "typing:Any"

  - id: FoldResult
    description: "Single fold training result with metrics"
    check_functions:
      - check_cv_result
    pydantic_model:
      fields:
        - name: fold_index
          type:
            native: "builtins:int"
          description: "Fold index (0-based)"
        - name: train_score
          type:
            native: "builtins:float"
          optional: true
          description: "Training score for this fold"
        - name: val_score
          type:
            native: "builtins:float"
          optional: true
          description: "Validation score for this fold"

  - id: CVResult
    description: "Cross-validation training result (models, metrics, OOS predictions)"
    check_functions:
      - check_cv_result
    pydantic_model:
      fields:
        - name: fold_results
          type:
            generic:
              container: list
              element_type:
                datatype_ref: FoldResult
          description: "Results from each fold"
        - name: oos_predictions
          type:
            native: "pandas:DataFrame"
          optional: true
          description: "Out-of-sample predictions"

  - id: PredictionData
    description: "Single prediction data point (timestamp, symbol, prediction, actual)"
    check_functions:
      - check_prediction_data
    examples:
      - timestamp: "2024-01-01T00:00:00"
        symbol: "USDJPY"
        prediction: 0.65
        actual_return: 0.02
    pydantic_model:
      fields:
        - name: timestamp
          type:
            native: "builtins:str"
          description: "Prediction timestamp"
        - name: symbol
          type:
            native: "builtins:str"
          description: "Trading symbol"
        - name: prediction
          type:
            native: "builtins:float"
          description: "Predicted value"
        - name: actual_return
          type:
            native: "builtins:float"
          optional: true
          description: "Actual return (for evaluation)"

  # Using generic for list
  - id: PredictionDataList
    description: "List of prediction data points"
    check_functions:
      - check_prediction_data
    generic:
      container: list
      element_type:
        datatype_ref: PredictionData

  # ===== Phase 4: Backtest & Evaluation =====
  - id: RankedPredictionData
    description: "Prediction data with ranking percentile"
    check_functions:
      - check_ranked_predictions
    pydantic_model:
      fields:
        - name: timestamp
          type:
            native: "builtins:str"
        - name: symbol
          type:
            native: "builtins:str"
        - name: prediction
          type:
            native: "builtins:float"
        - name: actual_return
          type:
            native: "builtins:float"
          optional: true
        - name: prediction_rank_pct
          type:
            native: "builtins:float"
          description: "Prediction rank percentile (0-1)"

  - id: RankedPredictionDataList
    description: "List of ranked prediction data"
    check_functions:
      - check_ranked_predictions
    generic:
      container: list
      element_type:
        datatype_ref: RankedPredictionData

  # Using enum for PositionSignal
  - id: PositionSignal
    description: "Trading position signal"
    check_functions:
      - check_position_signal
    enum:
      base_type: int
      members:
        - name: BUY
          value: 1
          description: "Long position"
        - name: SELL
          value: -1
          description: "Short position"
        - name: HOLD
          value: 0
          description: "No position"

  - id: SelectedCurrencyData
    description: "Selected currency with position signal (BUY/SELL/HOLD)"
    check_functions:
      - check_selected_currencies
    pydantic_model:
      fields:
        - name: timestamp
          type:
            native: "builtins:str"
        - name: symbol
          type:
            native: "builtins:str"
        - name: prediction
          type:
            native: "builtins:float"
        - name: signal
          type:
            datatype_ref: PositionSignal
          description: "Position signal"

  - id: SelectedCurrencyDataList
    description: "List of selected currency data"
    check_functions:
      - check_selected_currencies
    generic:
      container: list
      element_type:
        datatype_ref: SelectedCurrencyData

  - id: TradingCostConfig
    description: "Trading cost configuration (swap rates, spreads)"
    check_functions:
      - check_trading_cost_config
    pydantic_model:
      fields:
        - name: swap_rates
          type:
            generic:
              container: dict
              key_type:
                native: "builtins:str"
              value_type:
                native: "builtins:float"
          description: "Swap rates per symbol"
        - name: spread_costs
          type:
            generic:
              container: dict
              key_type:
                native: "builtins:str"
              value_type:
                native: "builtins:float"
          description: "Spread costs per symbol"

  - id: SelectedCurrencyDataWithCosts
    description: "Selected currency data with adjusted returns (swap & spread)"
    check_functions:
      - check_selected_currencies_with_costs
    pydantic_model:
      fields:
        - name: timestamp
          type:
            native: "builtins:str"
        - name: symbol
          type:
            native: "builtins:str"
        - name: prediction
          type:
            native: "builtins:float"
        - name: signal
          type:
            datatype_ref: PositionSignal
        - name: adjusted_return
          type:
            native: "builtins:float"
          description: "Return adjusted for swap and spread"

  - id: SelectedCurrencyDataWithCostsList
    description: "List of selected currency data with costs"
    check_functions:
      - check_selected_currencies_with_costs
    generic:
      container: list
      element_type:
        datatype_ref: SelectedCurrencyDataWithCosts

  - id: SimulationResult
    description: "Portfolio simulation result (returns, positions, equity curve)"
    check_functions:
      - check_simulation_result
    pydantic_model:
      fields:
        - name: portfolio_returns
          type:
            generic:
              container: list
              element_type:
                native: "builtins:float"
          description: "Time series of portfolio returns"
        - name: equity_curve
          type:
            native: "pandas:Series"
          optional: true
          description: "Portfolio equity curve"

  - id: PerformanceMetrics
    description: "Performance metrics (annual return, Sharpe, max drawdown, etc.)"
    check_functions:
      - check_performance_metrics
    examples:
      - annual_return: 0.15
        annual_volatility: 0.12
        sharpe_ratio: 1.25
        max_drawdown: -0.08
        calmar_ratio: 1.875
    pydantic_model:
      fields:
        - name: annual_return
          type:
            native: "builtins:float"
          description: "Annualized return"
        - name: annual_volatility
          type:
            native: "builtins:float"
          optional: true
          description: "Annualized volatility"
        - name: sharpe_ratio
          type:
            native: "builtins:float"
          description: "Sharpe ratio"
        - name: max_drawdown
          type:
            native: "builtins:float"
          description: "Maximum drawdown"
        - name: calmar_ratio
          type:
            native: "builtins:float"
          optional: true
          description: "Calmar ratio"

transforms:
  # ===== Phase 1: Market Data Ingestion =====
  - id: fetch_yahoo_finance_ohlcv
    description: "Fetch OHLCV data from Yahoo Finance API"
    impl: "apps.algo_trade_pipeline.transforms.market_data:fetch_yahoo_finance_ohlcv"
    file_path: "transforms/market_data.py"
    parameters:
      - name: config
        datatype_ref: MarketDataIngestionConfig
    return_type_ref: ProviderBatchCollection

  - id: normalize_multi_provider
    description: "Normalize data from multiple providers to unified format"
    impl: "apps.algo_trade_pipeline.transforms.market_data:normalize_multi_provider"
    file_path: "transforms/market_data.py"
    parameters:
      - name: batches
        datatype_ref: ProviderBatchCollection
    return_type_ref: NormalizedOHLCVBundle
    spec_metadata:
      logic_overview:
        - "Extract DataFrame from each provider batch"
        - "Map provider-specific column names to standard OHLCV format (open, high, low, close, volume)"
        - "Convert all timestamps to UTC datetime format"
        - "Validate data completeness and drop rows with missing OHLC values"
        - "Combine all normalized DataFrames"
      pseudo_code: |
        normalized_frames = []
        for batch in batches.batches:
            df = batch  # Extract DataFrame
            df = standardize_columns(df)  # Map to OHLCV
            df.index = pd.to_datetime(df.index).tz_localize('UTC')
            df = df.dropna(subset=['open', 'high', 'low', 'close'])
            normalized_frames.append(df)
        return NormalizedOHLCVBundle(data=pd.concat(normalized_frames))
      complexity: "O(n*m) where n=number of batches, m=rows per batch"
      dependencies:
        - pandas
        - datetime

  - id: merge_market_data_bundle
    description: "Merge normalized bundle into MultiIndex DataFrame"
    impl: "apps.algo_trade_pipeline.transforms.market_data:merge_market_data_bundle"
    file_path: "transforms/market_data.py"
    parameters:
      - name: bundle
        datatype_ref: NormalizedOHLCVBundle
    return_type_ref: MultiAssetOHLCVFrame

  - id: persist_market_data_snapshot
    description: "Persist market data to storage and return metadata"
    impl: "apps.algo_trade_pipeline.transforms.market_data:persist_market_data_snapshot"
    file_path: "transforms/market_data.py"
    parameters:
      - name: frame
        datatype_ref: MultiAssetOHLCVFrame
      - name: config
        datatype_ref: MarketDataIngestionConfig
    return_type_ref: MarketDataSnapshotMeta

  # ===== Phase 2: Feature Engineering =====
  - id: resample_ohlcv
    description: "Resample OHLCV data to specified frequency (e.g., 1h, 4h, 1D)"
    impl: "apps.algo_trade_pipeline.transforms.features:resample_ohlcv"
    file_path: "transforms/features.py"
    parameters:
      - name: df
        datatype_ref: MultiAssetOHLCVFrame
      - name: freq
        native: "builtins:str"
        default: "1h"
    return_type_ref: OHLCVFrame

  - id: calculate_rsi
    description: "Calculate RSI indicator and add rsi_{period} column"
    impl: "apps.algo_trade_pipeline.transforms.features:calculate_rsi"
    file_path: "transforms/features.py"
    parameters:
      - name: df
        datatype_ref: OHLCVFrame
      - name: period
        native: "builtins:int"
        default: 14
    return_type_ref: FeatureFrame

  - id: calculate_adx
    description: "Calculate ADX indicator and add adx_{period} column"
    impl: "apps.algo_trade_pipeline.transforms.features:calculate_adx"
    file_path: "transforms/features.py"
    parameters:
      - name: df
        datatype_ref: OHLCVFrame
      - name: period
        native: "builtins:int"
        default: 14
    return_type_ref: FeatureFrame

  - id: calculate_recent_return
    description: "Calculate recent return and add recent_return_{lookback} column"
    impl: "apps.algo_trade_pipeline.transforms.features:calculate_recent_return"
    file_path: "transforms/features.py"
    parameters:
      - name: df
        datatype_ref: OHLCVFrame
      - name: lookback
        native: "builtins:int"
        default: 5
    return_type_ref: FeatureFrame

  - id: calculate_volatility
    description: "Calculate volatility and add volatility_{window} column"
    impl: "apps.algo_trade_pipeline.transforms.features:calculate_volatility"
    file_path: "transforms/features.py"
    parameters:
      - name: df
        datatype_ref: OHLCVFrame
      - name: window
        native: "builtins:int"
        default: 20
    return_type_ref: FeatureFrame

  - id: calculate_future_return
    description: "Calculate future return as target variable (add target column)"
    impl: "apps.algo_trade_pipeline.transforms.features:calculate_future_return"
    file_path: "transforms/features.py"
    parameters:
      - name: df
        datatype_ref: FeatureFrame
      - name: forward
        native: "builtins:int"
        default: 5
      - name: convert_type
        native: "builtins:str"
        literal:
          - "RETURN"
          - "DIRECTION"
          - "LOG_RETURN"
        default: "RETURN"
    return_type_ref: TargetFrame

  - id: clean_and_align_feature_target
    description: "Clean and align feature and target frames to ensure matching indexes"
    impl: "apps.algo_trade_pipeline.transforms.features:clean_and_align_feature_target"
    file_path: "transforms/features.py"
    parameters:
      - name: target
        datatype_ref: TargetFrame
      - name: features
        datatype_ref: FeatureFrame
    return_type_ref: AlignedFeatureTarget

  # ===== Phase 3: Model Training & Prediction =====
  - id: train_lightgbm_cv
    description: "Train LightGBM with cross-validation (internal CV split generation)"
    impl: "apps.algo_trade_pipeline.transforms.model:train_lightgbm_cv"
    file_path: "transforms/model.py"
    parameters:
      - name: aligned_data
        datatype_ref: AlignedFeatureTarget
      - name: cv_config
        datatype_ref: SimpleCVConfig
        optional: true
      - name: lgbm_params
        datatype_ref: SimpleLGBMParams
        optional: true
    return_type_ref: CVResult
    spec_metadata:
      logic_overview:
        - "Unpack aligned feature and target DataFrames from tuple"
        - "Use cv_config to generate train/test splits according to selected method (TIME_SERIES, EXPANDING_WINDOW, SLIDING_WINDOW)"
        - "For each fold, train LightGBM model with lgbm_params"
        - "Collect validation metrics and OOS predictions per fold"
        - "Return CVResult with all fold results and concatenated OOS predictions"
      pseudo_code: |
        features, target = aligned_data
        splits = generate_cv_splits(features, cv_config)
        fold_results = []
        oos_preds = []
        for fold_idx, (train_idx, val_idx) in enumerate(splits):
            X_train, y_train = features.iloc[train_idx], target.iloc[train_idx]
            X_val, y_val = features.iloc[val_idx], target.iloc[val_idx]
            model = lgb.train(lgbm_params, lgb.Dataset(X_train, y_train))
            val_pred = model.predict(X_val)
            fold_results.append(FoldResult(fold_index=fold_idx, train_score=..., val_score=...))
            oos_preds.append(pd.DataFrame({'pred': val_pred}, index=val_idx))
        return CVResult(fold_results=fold_results, oos_predictions=pd.concat(oos_preds))
      complexity: "O(n_folds * n_samples * log(n_samples)) for tree training"
      notes: |
        - Time-series CV ensures no data leakage by respecting temporal order
        - OOS predictions are critical for unbiased performance estimation
        - Default cv_config uses 5-fold time-series split if not provided

  - id: generate_predictions
    description: "Generate prediction data list from CV OOS predictions"
    impl: "apps.algo_trade_pipeline.transforms.model:generate_predictions"
    file_path: "transforms/model.py"
    parameters:
      - name: cv_result
        datatype_ref: CVResult
      - name: aligned_data
        datatype_ref: AlignedFeatureTarget
    return_type_ref: PredictionDataList

  # ===== Phase 4: Backtest & Evaluation =====
  - id: rank_predictions
    description: "Rank predictions and add prediction_rank_pct column"
    impl: "apps.algo_trade_pipeline.transforms.backtest:rank_predictions"
    file_path: "transforms/backtest.py"
    parameters:
      - name: predictions
        datatype_ref: PredictionDataList
    return_type_ref: RankedPredictionDataList

  - id: filter_top_predictions
    description: "Filter top N predictions and assign position signals"
    impl: "apps.algo_trade_pipeline.transforms.backtest:filter_top_predictions"
    file_path: "transforms/backtest.py"
    parameters:
      - name: ranked
        datatype_ref: RankedPredictionDataList
      - name: top_n
        native: "builtins:int"
        default: 3
      - name: threshold
        native: "builtins:float"
        default: 0.7
    return_type_ref: SelectedCurrencyDataList

  - id: apply_trading_costs
    description: "Apply swap rates and spread costs to calculate adjusted returns"
    impl: "apps.algo_trade_pipeline.transforms.backtest:apply_trading_costs"
    file_path: "transforms/backtest.py"
    parameters:
      - name: selected
        datatype_ref: SelectedCurrencyDataList
      - name: cost_config
        datatype_ref: TradingCostConfig
        optional: true
    return_type_ref: SelectedCurrencyDataWithCostsList

  - id: simulate_buy_scenario
    description: "Run portfolio simulation with specified allocation method"
    impl: "apps.algo_trade_pipeline.transforms.backtest:simulate_buy_scenario"
    file_path: "transforms/backtest.py"
    parameters:
      - name: selected_currencies
        datatype_ref: SelectedCurrencyDataWithCostsList
      - name: allocation_method
        native: "builtins:str"
        literal:
          - "equal"
          - "weighted"
          - "risk_parity"
        default: "equal"
    return_type_ref: SimulationResult

  - id: calculate_performance_metrics
    description: "Calculate performance metrics (Sharpe, max drawdown, Calmar, etc.)"
    impl: "apps.algo_trade_pipeline.transforms.backtest:calculate_performance_metrics"
    file_path: "transforms/backtest.py"
    parameters:
      - name: simulation
        datatype_ref: SimulationResult
      - name: risk_free_rate
        native: "builtins:float"
        default: 0.0
    return_type_ref: PerformanceMetrics

# DAG stages with type-based auto-generation
dag_stages:
  # Phase 1: Market Data Ingestion (linear pipeline)
  - stage_id: "data_fetch"
    description: "Fetch market data from provider"
    selection_mode: "single"
    input_type: MarketDataIngestionConfig
    output_type: ProviderBatchCollection
    candidates:
      - fetch_yahoo_finance_ohlcv

  - stage_id: "normalization"
    description: "Normalize multi-provider data"
    selection_mode: "single"
    input_type: ProviderBatchCollection
    output_type: NormalizedOHLCVBundle
    candidates:
      - normalize_multi_provider

  - stage_id: "merge"
    description: "Merge into MultiIndex DataFrame"
    selection_mode: "single"
    input_type: NormalizedOHLCVBundle
    output_type: MultiAssetOHLCVFrame
    candidates:
      - merge_market_data_bundle

  - stage_id: "persist"
    description: "Persist market data snapshot"
    selection_mode: "single"
    input_type: MultiAssetOHLCVFrame
    output_type: MarketDataSnapshotMeta
    collect_output: true
    candidates:
      - persist_market_data_snapshot

  # Phase 2: Feature Engineering
  # NOTE: resample output uses pandas DataFrame (OHLCVFrame type_alias)
  - stage_id: "resample"
    description: "Resample OHLCV to target frequency"
    selection_mode: "single"
    input_type: MultiAssetOHLCVFrame
    output_type: OHLCVFrame
    candidates:
      - resample_ohlcv

  # Indicator calculation stage allows multiple selections
  - stage_id: "indicator_calculation"
    description: "Calculate technical indicators (select multiple)"
    selection_mode: "multiple"
    max_select: null  # unlimited - can use all indicators
    input_type: OHLCVFrame
    output_type: FeatureFrame  # Feature engineering outputs
    candidates:
      - calculate_rsi
      - calculate_adx
      - calculate_recent_return
      - calculate_volatility

  - stage_id: "target_generation"
    description: "Generate target variable (future return)"
    selection_mode: "single"
    input_type: FeatureFrame
    output_type: TargetFrame
    candidates:
      - calculate_future_return

  - stage_id: "feature_target_alignment"
    description: "Clean and align feature/target frames for model training"
    selection_mode: "single"
    input_type: TargetFrame
    output_type: AlignedFeatureTarget
    candidates:
      - clean_and_align_feature_target

  # Phase 3: Model Training & Prediction
  - stage_id: "model_training"
    description: "Train LightGBM with cross-validation"
    selection_mode: "single"
    input_type: AlignedFeatureTarget
    output_type: CVResult
    candidates:
      - train_lightgbm_cv

  - stage_id: "prediction_generation"
    description: "Generate OOS predictions from CV result"
    selection_mode: "single"
    input_type: CVResult
    output_type: PredictionDataList
    candidates:
      - generate_predictions

  # Phase 4: Backtest & Evaluation
  - stage_id: "ranking"
    description: "Rank predictions by score"
    selection_mode: "single"
    input_type: PredictionDataList
    output_type: RankedPredictionDataList
    candidates:
      - rank_predictions

  - stage_id: "filtering"
    description: "Filter top predictions and assign signals"
    selection_mode: "single"
    input_type: RankedPredictionDataList
    output_type: SelectedCurrencyDataList
    candidates:
      - filter_top_predictions

  - stage_id: "cost_application"
    description: "Apply trading costs (swap + spread)"
    selection_mode: "single"
    input_type: SelectedCurrencyDataList
    output_type: SelectedCurrencyDataWithCostsList
    candidates:
      - apply_trading_costs

  - stage_id: "simulation"
    description: "Run portfolio simulation"
    selection_mode: "single"
    input_type: SelectedCurrencyDataWithCostsList
    output_type: SimulationResult
    candidates:
      - simulate_buy_scenario

  - stage_id: "performance_evaluation"
    description: "Calculate performance metrics"
    selection_mode: "single"
    input_type: SimulationResult
    output_type: PerformanceMetrics
    collect_output: true
    candidates:
      - calculate_performance_metrics
